// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation

// swiftlint:disable file_length
// swiftlint:disable line_length

// swiftlint:disable type_body_length
// swiftlint:disable nesting

enum L10n {
  /// Some alert body there
  case AlertMessage
  /// Title of the alert
  case AlertTitle
  /// Hello, my name is %@ and I'm %d
  case Greetings(String, Int)
  /// These are %3$@'s %1$d %2$@.
  case ObjectOwnership(Int, String, String)

  case Apples(ApplesL10n)
  enum ApplesL10n {
    /// You have %d apples
    case Count(Int)
  }

  case Bananas(BananasL10n)
  enum BananasL10n {
    /// Those %d bananas belong to %@.
    case Owner(Int, String)
  }

  case Settings(SettingsL10n)
  enum SettingsL10n {

    case NavigationBar(NavigationBarL10n)
    enum NavigationBarL10n {
      /// Some Reserved Keyword there
      case `Self`

      case Title(TitleL10n)
      enum TitleL10n {

        case Even(EvenL10n)
        enum EvenL10n {
          /// Settings
          case Deeper

          case Deeper(DeeperL10n)
          enum DeeperL10n {

            case Than(ThanL10n)
            enum ThanL10n {
              // maximum level reached, please make sure not to use keys with so many levels
            }
          }
        }
      }
    }

    case UserProfileSection(UserProfileSectionL10n)
    enum UserProfileSectionL10n {
      /// Here you can change some user profile settings.
      case FooterText
      /// User Profile Settings
      case HEADERTITLE
    }
  }
}

extension L10n: CustomStringConvertible {
  var description: String { return self.string }

  var string: String {
    switch self {
      case .AlertMessage:
        return L10n.tr("alert_message")
      case .AlertTitle:
        return L10n.tr("alert_title")
      case .Greetings(let p0, let p1):
        return L10n.tr("greetings", p0, p1)
      case .ObjectOwnership(let p0, let p1, let p2):
        return L10n.tr("ObjectOwnership", p0, p1, p2)
      case .Apples(let level1key):

        switch level1key {
          case .Count(let p0):
            return L10n.tr("apples.count", p0)
        }
      case .Bananas(let level1key):

        switch level1key {
          case .Owner(let p0, let p1):
            return L10n.tr("bananas.owner", p0, p1)
        }
      case .Settings(let level1key):

        switch level1key {
          case .NavigationBar(let level2key):

            switch level2key {
              case .`Self`:
                return L10n.tr("settings.navigation-bar.self")
              case .Title(let level3key):

                switch level3key {
                  case .Even(let level4key):

                    switch level4key {
                      case .Deeper:
                        return L10n.tr("settings.navigation-bar.title.even.deeper")
                      case .Deeper(let level5key):

                        switch level5key {
                          case .Than(let level6key):
                            // maximum level reached, please make sure not to use keys with so many levels
                        }
                    }
                }
            }
          case .UserProfileSection(let level2key):

            switch level2key {
              case .FooterText:
                return L10n.tr("seTTings.uSer-proFile-sectioN.footer_text")
              case .HEADERTITLE:
                return L10n.tr("SETTINGS.USER_PROFILE_SECTION.HEADER_TITLE")
            }
        }
    }
  }

  private static func tr(key: String, _ args: CVarArgType...) -> String {
    let format = NSLocalizedString(key, comment: "")
    return String(format: format, locale: NSLocale.currentLocale(), arguments: args)
  }
}

// swiftlint:enable type_body_length
// swiftlint:enable nesting

func tr(key: L10n) -> String {
  return key.string
}
